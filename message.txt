using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text.RegularExpressions;
using NLog;
using NLog.Config;
using NLog.Targets;
using Npgsql;
using Sandbox.Game.Entities.Blocks;
using Sandbox.Game.GameSystems.BankingAndCurrency;
using Sandbox.Game.SessionComponents;
using Sandbox.Game.World;
using Torch.Managers.PatchManager;
using VRage.Network;

namespace ServerConsole.Patch
{
	[PatchShim]
	public static class MyStorePatch
	{
		internal static readonly MethodInfo logupdate =
		 typeof(MyStoreBlock).GetMethod("SendSellItemResult", BindingFlags.Instance | BindingFlags.NonPublic, null, new Type[] { typeof(long), typeof(string), typeof(long), typeof(int), typeof(MyStoreSellItemResults) }, null) ??
		 throw new Exception("Failed to find patch method");

		internal static readonly MethodInfo storePatchLog =
			typeof(MyStorePatch).GetMethod(nameof(StorePatchMethodSell), BindingFlags.Static | BindingFlags.Public) ??
			throw new Exception("Failed to find patch method");

		internal static readonly MethodInfo logupdate2 =
  typeof(MyStoreBlock).GetMethod("SendBuyItemResult", BindingFlags.Instance | BindingFlags.NonPublic, null, new Type[] { typeof(long), typeof(string), typeof(long), typeof(int), typeof(MyStoreBuyItemResults), typeof(EndpointId) }, null) ??
  throw new Exception("Failed to find patch method");

		internal static readonly MethodInfo storePatchLog2 =
			typeof(MyStorePatch).GetMethod(nameof(StorePatchMethodBuy), BindingFlags.Static | BindingFlags.Public) ??
			throw new Exception("Failed to find patch method");

		internal static readonly MethodInfo update =
			typeof(MyStoreBlock).GetMethod("BuyFromPlayer", BindingFlags.Instance | BindingFlags.NonPublic) ??
			throw new Exception("Failed to find patch method");

		internal static readonly MethodInfo updateTwo =
	   typeof(MyStoreBlock).GetMethod("SellToPlayer", BindingFlags.Instance | BindingFlags.NonPublic) ??
	   throw new Exception("Failed to find patch method");

		internal static readonly MethodInfo storePatch =
			typeof(MyStorePatch).GetMethod(nameof(StorePatchMethod), BindingFlags.Static | BindingFlags.Public) ??
			throw new Exception("Failed to find patch method");

		internal static readonly MethodInfo storePatchTwo =
			 typeof(MyStorePatch).GetMethod(nameof(StorePatchMethodTwo), BindingFlags.Static | BindingFlags.Public) ??
			 throw new Exception("Failed to find patch method");

		public static Logger log = LogManager.GetLogger("Stores");

		internal static readonly MethodInfo limitUpdate =
			typeof(MySessionComponentEconomy).GetMethod("GetStoreCreationLimitPerPlayer", BindingFlags.Instance | BindingFlags.Public) ??
			throw new Exception("Failed to find patch method");

		internal static readonly MethodInfo limitUpdateM =
			typeof(MyStorePatch).GetMethod(nameof(YeetKeenLimit), BindingFlags.Static | BindingFlags.Public) ??
			throw new Exception("Failed to find patch method");

		public static void ApplyLogging()
		{

			var rules = LogManager.Configuration.LoggingRules;

			for (int i = rules.Count - 1; i >= 0; i--)
			{

				var rule = rules[i];

				if (rule.LoggerNamePattern == "Stores")
					rules.RemoveAt(i);
			}


			var logTarget = new FileTarget
			{
				FileName = "Logs/Stores-" + DateTime.Now.Day + "-" + DateTime.Now.Month + "-" + DateTime.Now.Year + ".txt",
				Layout = "${var:logStamp} ${var:logContent}"
			};

			var logRule = new LoggingRule("Stores", LogLevel.Debug, logTarget)
			{
				Final = true
			};

			rules.Insert(0, logRule);

			LogManager.Configuration.Reload();
		}

		public static void YeetKeenLimit(ref int __result)
		{
			__result = 5000000;
			return;
		}
		public static void Patch(PatchContext ctx)
		{

			ApplyLogging();

			ctx.GetPattern(logupdate).Suffixes.Add(storePatchLog);
			ctx.GetPattern(logupdate2).Suffixes.Add(storePatchLog2);
			ctx.GetPattern(update).Prefixes.Add(storePatch);
			// ctx.GetPattern(update).Prefixes.Add(storePatch);
			ctx.GetPattern(updateTwo).Prefixes.Add(storePatchTwo);
			ctx.GetPattern(limitUpdate).Suffixes.Add(limitUpdateM);

		}

		public static Dictionary<long, string> PossibleLogs = new Dictionary<long, string>();

		public static void StorePatchMethodSell(long id, string name, long price, int amount, MyStoreSellItemResults result)
		{
			if (result == MyStoreSellItemResults.Success && PossibleLogs.ContainsKey(id))
			{
				log.Info(PossibleLogs[id]);
				InsertLogIntoDatabase(id); // pass the id directly
			}
			PossibleLogs.Remove(id);

		}

		public static void StorePatchMethodBuy(long id, string name, long price, int amount, MyStoreBuyItemResults result, EndpointId targetEndpoint)
		{
			if (result == MyStoreBuyItemResults.Success && PossibleLogs.ContainsKey(id))
			{
				log.Info(PossibleLogs[id]);
				InsertLogIntoDatabase(id); // pass the id directly
			}
			PossibleLogs.Remove(id);
		}


		private static void InsertLogIntoDatabase(long id)
		{
			if (PossibleLogs.ContainsKey(id))
			{
				var logData = PossibleLogs[id];

				// Define a regex pattern to match each field from the log data
				string pattern =
					@"SteamId:(?<SteamId>\d+),action:(?<Action>\w+),Amount:(?<Amount>\d+),TypeId:(?<TypeId>[\w_]+),SubTypeId:(?<SubTypeId>[\w]+),TotalMoney:(?<TotalMoney>\d+),GridId:(?<GridId>\d+),FacTag:(?<FacTag>\w+),GridName:(?<GridName>[\w\s\[\]]+)";

				// Execute regex matching
				var match = Regex.Match(logData, pattern);

				if (match.Success)
				{
					// Extract each variable from the match
					long steamId = long.Parse(match.Groups["SteamId"].Value);
					string action = match.Groups["Action"].Value;
					int amount = int.Parse(match.Groups["Amount"].Value);
					string typeId = match.Groups["TypeId"].Value;
					string subTypeId = match.Groups["SubTypeId"].Value;
					long totalMoney = long.Parse(match.Groups["TotalMoney"].Value);
					long gridId = long.Parse(match.Groups["GridId"].Value);
					string facTag = match.Groups["FacTag"].Value;
					string gridName = match.Groups["GridName"].Value;

					string connectionString = ServerConsoleConfig.Instance.SQLConnectionInfo;
					using (var conn = new NpgsqlConnection(connectionString))
					{
						conn.Open();

						using (var cmd = new NpgsqlCommand())
						{
							cmd.Connection = conn;

							cmd.CommandText = @"INSERT INTO stc_buyselltransactions
                            (steamid, action, amount, typeid, subtypeid, totalmoney, gridid, factag, gridname, transactiontime, sector)
                            VALUES (@steamId, @action, @amount, @typeId, @subTypeId, @totalMoney, @gridId, @facTag, @gridName, @transactionTime, @sector)";

							cmd.Parameters.AddWithValue("steamId", (Int64)steamId);
							cmd.Parameters.AddWithValue("action", action);
							cmd.Parameters.AddWithValue("amount", (Int64)amount);
							cmd.Parameters.AddWithValue("typeId", typeId);
							cmd.Parameters.AddWithValue("subTypeId", subTypeId);
							cmd.Parameters.AddWithValue("totalMoney", (Int64)totalMoney);
							cmd.Parameters.AddWithValue("gridId", (Int64)gridId);
							cmd.Parameters.AddWithValue("facTag", facTag);
							cmd.Parameters.AddWithValue("gridName", gridName);
							cmd.Parameters.AddWithValue("transactionTime", DateTime.UtcNow);
							cmd.Parameters.AddWithValue("sector", ServerConsoleConfig.Instance.Sector);


							cmd.ExecuteNonQuery();
						}
					}
				}
			}
		}

		public static Boolean StorePatchMethod(long id,
			int amount,
			long targetEntityId,
			MyPlayer player,
			MyAccountInfo playerAccountInfo, MyStoreBlock __instance)
		{
			if (__instance is MyStoreBlock store)
			{
				MyStoreItem storeItem = (MyStoreItem)null;
				foreach (MyStoreItem playerItem in store.PlayerItems)
				{
					if (playerItem.Id == id)
					{
						storeItem = playerItem;
						break;
					}
				}
				if (storeItem == null)
				{

					return true;
				}
				if (storeItem.IsCustomStoreItem)
				{
					return true;
				}
				if (!PossibleLogs.ContainsKey(id))
				{
					PossibleLogs.Add(id,
						$"SteamId:{player.Id.SteamId},action:bought,Amount:{amount},TypeId:{storeItem.Item.Value.TypeIdString}," +
						$"SubTypeId:{storeItem.Item.Value.SubtypeName},TotalMoney:{storeItem.PricePerUnit * (long)amount}," +
						$"GridId:{store.CubeGrid.EntityId},FacTag:{store.GetOwnerFactionTag()},GridName:{store.CubeGrid.DisplayName}");
				}

			}
			return true;
		}

		public static Boolean StorePatchMethodTwo(long id, int amount, long sourceEntityId, MyPlayer player, MyStoreBlock __instance)
		{
			if (__instance is MyStoreBlock store)
			{
				MyStoreItem myStoreItem = (MyStoreItem)null;

				foreach (MyStoreItem playerItem in store.PlayerItems)
				{
					if (playerItem.Id == id)
					{
						myStoreItem = playerItem;
						break;
					}
				}
				if (myStoreItem == null)
				{
					return false;
				}

				if (!PossibleLogs.ContainsKey(id))
				{
					PossibleLogs.Add(id,
						$"SteamId:{player.Id.SteamId},action:sold,Amount:{amount},TypeId:{myStoreItem.Item.Value.TypeIdString}," +
						$"SubTypeId:{myStoreItem.Item.Value.SubtypeName},TotalMoney:{myStoreItem.PricePerUnit * (long)amount}," +
						$"GridId:{store.CubeGrid.EntityId},FacTag:{store.GetOwnerFactionTag()},GridName:{store.CubeGrid.DisplayName}");
				}
			}

			return true;
		}
		public static MyIdentity GetIdentityByNameOrId(string playerNameOrSteamId)
		{
			foreach (var identity in MySession.Static.Players.GetAllIdentities())
			{
				if (identity.DisplayName == playerNameOrSteamId)
					return identity;
				if (ulong.TryParse(playerNameOrSteamId, out ulong steamId))
				{
					ulong id = MySession.Static.Players.TryGetSteamId(identity.IdentityId);
					if (id == steamId)
						return identity;
					if (identity.IdentityId == (long)steamId)
						return identity;
				}

			}
			return null;
		}

	}
}